apiVersion: apps/v1
kind: StatefulSet
metadata:
    annotations:
        meta.helm.sh/release-name: harbor
        meta.helm.sh/release-namespace: harbor
    labels:
        app: harbor
        app.kubernetes.io/component: redis
        app.kubernetes.io/instance: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: 2.13.1
        chart: harbor
        component: redis
        heritage: Helm
        release: harbor
    name: harbor-redis
    namespace: harbor
spec:
    persistentVolumeClaimRetentionPolicy:
        whenDeleted: Retain
        whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
        matchLabels:
            app: harbor
            component: redis
            release: harbor
    serviceName: harbor-redis
    template:
        metadata:
            creationTimestamp: null
            labels:
                app: harbor
                app.kubernetes.io/component: redis
                app.kubernetes.io/instance: harbor
                app.kubernetes.io/managed-by: Helm
                app.kubernetes.io/name: harbor
                app.kubernetes.io/part-of: harbor
                app.kubernetes.io/version: 2.13.1
                chart: harbor
                component: redis
                heritage: Helm
                release: harbor
        spec:
            automountServiceAccountToken: false
            containers:
                - image: goharbor/redis-photon:v2.13.1
                  imagePullPolicy: IfNotPresent
                  livenessProbe:
                    failureThreshold: 3
                    initialDelaySeconds: 300
                    periodSeconds: 10
                    successThreshold: 1
                    tcpSocket:
                        port: 6379
                    timeoutSeconds: 1
                  name: redis
                  readinessProbe:
                    failureThreshold: 3
                    initialDelaySeconds: 1
                    periodSeconds: 10
                    successThreshold: 1
                    tcpSocket:
                        port: 6379
                    timeoutSeconds: 1
                  resources: {}
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                        drop:
                            - ALL
                    privileged: false
                    runAsNonRoot: true
                    seccompProfile:
                        type: RuntimeDefault
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
                  volumeMounts:
                    - mountPath: /var/lib/redis
                      name: data
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            schedulerName: default-scheduler
            securityContext:
                fsGroup: 999
                runAsUser: 999
            terminationGracePeriodSeconds: 120
            volumes:
                - emptyDir: {}
                  name: data
    updateStrategy:
        rollingUpdate:
            partition: 0
        type: RollingUpdate
