apiVersion: apps/v1
kind: StatefulSet
metadata:
    annotations:
        meta.helm.sh/release-name: harbor
        meta.helm.sh/release-namespace: harbor
    labels:
        app: harbor
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: 2.13.1
        chart: harbor
        component: database
        heritage: Helm
        release: harbor
    name: harbor-database
    namespace: harbor
spec:
    persistentVolumeClaimRetentionPolicy:
        whenDeleted: Retain
        whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
        matchLabels:
            app: harbor
            component: database
            release: harbor
    serviceName: harbor-database
    template:
        metadata:
            annotations:
                checksum/secret: 67bde9e5c559c1ce93596fcc34babc5cfeffe31505eb121fa321f058552b7e03
            creationTimestamp: null
            labels:
                app: harbor
                app.kubernetes.io/component: database
                app.kubernetes.io/instance: harbor
                app.kubernetes.io/managed-by: Helm
                app.kubernetes.io/name: harbor
                app.kubernetes.io/part-of: harbor
                app.kubernetes.io/version: 2.13.1
                chart: harbor
                component: database
                heritage: Helm
                release: harbor
        spec:
            automountServiceAccountToken: false
            containers:
                - env:
                    - name: PGDATA
                      value: /var/lib/postgresql/data/pgdata
                  envFrom:
                    - secretRef:
                        name: harbor-database
                  image: goharbor/harbor-db:v2.13.1
                  imagePullPolicy: IfNotPresent
                  livenessProbe:
                    exec:
                        command:
                            - /docker-healthcheck.sh
                    failureThreshold: 3
                    initialDelaySeconds: 300
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 1
                  name: database
                  readinessProbe:
                    exec:
                        command:
                            - /docker-healthcheck.sh
                    failureThreshold: 3
                    initialDelaySeconds: 1
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 1
                  resources: {}
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                        drop:
                            - ALL
                    privileged: false
                    runAsNonRoot: true
                    seccompProfile:
                        type: RuntimeDefault
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
                  volumeMounts:
                    - mountPath: /var/lib/postgresql/data
                      name: database-data
                    - mountPath: /dev/shm
                      name: shm-volume
            dnsPolicy: ClusterFirst
            initContainers:
                - args:
                    - -c
                    - chmod -R 700 /var/lib/postgresql/data/pgdata || true
                  command:
                    - /bin/sh
                  image: goharbor/harbor-db:v2.13.1
                  imagePullPolicy: IfNotPresent
                  name: data-permissions-ensurer
                  resources: {}
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                        drop:
                            - ALL
                    privileged: false
                    runAsNonRoot: true
                    seccompProfile:
                        type: RuntimeDefault
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
                  volumeMounts:
                    - mountPath: /var/lib/postgresql/data
                      name: database-data
            restartPolicy: Always
            schedulerName: default-scheduler
            securityContext:
                fsGroup: 999
                runAsUser: 999
            terminationGracePeriodSeconds: 120
            volumes:
                - emptyDir:
                    medium: Memory
                    sizeLimit: 512Mi
                  name: shm-volume
                - emptyDir: {}
                  name: database-data
    updateStrategy:
        rollingUpdate:
            partition: 0
        type: RollingUpdate
