apiVersion: v1
data:
    nginx.conf: |
        worker_processes auto;
        pid /tmp/nginx.pid;

        events {
          worker_connections 3096;
          use epoll;
          multi_accept on;
        }

        http {
          client_body_temp_path /tmp/client_body_temp;
          proxy_temp_path /tmp/proxy_temp;
          fastcgi_temp_path /tmp/fastcgi_temp;
          uwsgi_temp_path /tmp/uwsgi_temp;
          scgi_temp_path /tmp/scgi_temp;
          tcp_nodelay on;

          # this is necessary for us to be able to disable request buffering in all cases
          proxy_http_version 1.1;

          upstream core {
            server "harbor-core:80";
          }

          upstream portal {
            server harbor-portal:80;
          }

          log_format timed_combined '[$time_local]:$remote_addr - '
            '"$request" $status $body_bytes_sent '
            '"$http_referer" "$http_user_agent" '
            '$request_time $upstream_response_time $pipe';

          access_log /dev/stdout timed_combined;

          map $http_x_forwarded_proto $x_forwarded_proto {
            default $http_x_forwarded_proto;
            ""      $scheme;
          }

          server {
            listen 8080;
            listen [::]:8080;
            server_tokens off;
            # disable any limits to avoid HTTP 413 for large image uploads
            client_max_body_size 0;

            # Add extra headers
            add_header X-Frame-Options DENY;
            add_header Content-Security-Policy "frame-ancestors 'none'";

            location / {
              proxy_pass http://portal/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

              proxy_buffering off;
              proxy_request_buffering off;
            }

            location /api/ {
              proxy_pass http://core/api/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

              proxy_buffering off;
              proxy_request_buffering off;
              proxy_connect_timeout 30s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
            }

            location /c/ {
              proxy_pass http://core/c/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

              proxy_buffering off;
              proxy_request_buffering off;
              proxy_connect_timeout 30s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
            }

            location /v1/ {
              return 404;
            }

            location /v2/ {
              proxy_pass http://core/v2/;
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $x_forwarded_proto;
              proxy_buffering off;
              proxy_request_buffering off;
              proxy_send_timeout 900;
              proxy_read_timeout 900;
            }

            location /service/ {
              proxy_pass http://core/service/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

              proxy_buffering off;
              proxy_request_buffering off;
            }

          location /service/notifications {
              return 404;
            }
          }
        }
kind: ConfigMap
metadata:
    annotations:
        meta.helm.sh/release-name: harbor
        meta.helm.sh/release-namespace: harbor
    labels:
        app: harbor
        app.kubernetes.io/instance: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: 2.13.1
        chart: harbor
        heritage: Helm
        release: harbor
    name: harbor-nginx
    namespace: harbor
