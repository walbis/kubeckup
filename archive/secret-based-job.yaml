---
apiVersion: batch/v1
kind: Job
metadata:
  name: secret-based-backup-test
  namespace: test-backup
  labels:
    app: cluster-backup
    component: secret-test
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app: cluster-backup
        component: secret-test
    spec:
      serviceAccountName: cluster-backup
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: backup
        image: golang:1.21-alpine
        command: ["/workspace/cluster-backup"]
        env:
        # All configuration now comes from the backup-secrets
        - name: CLUSTER_DOMAIN
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: cluster-domain
        - name: CLUSTER_NAME
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: cluster-name
        - name: MINIO_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: minio-endpoint
        - name: MINIO_BUCKET
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: minio-bucket
        - name: MINIO_USE_SSL
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: minio-use-ssl
        - name: EXCLUDE_NAMESPACES
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: exclude-namespaces
        - name: BATCH_SIZE
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: batch-size
        - name: RETRY_ATTEMPTS
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: retry-attempts
        - name: RETRY_DELAY
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: retry-delay
        - name: LOG_LEVEL
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: log-level
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: minio-access-key
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: backup-secrets
              key: minio-secret-key
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: workspace
          mountPath: /workspace
      volumes:
      - name: tmp
        emptyDir: {}
      - name: workspace
        emptyDir: {}
      initContainers:
      - name: setup-binary
        image: golang:1.21-alpine
        command: ["/bin/sh"]
        args:
        - -c
        - |
          apk add --no-cache git
          cd /workspace
          cat > go.mod << 'EOF'
          module cluster-backup
          
          go 1.21
          
          require (
            github.com/minio/minio-go/v7 v7.0.63
            github.com/prometheus/client_golang v1.17.0
            gopkg.in/yaml.v3 v3.0.1
            k8s.io/apimachinery v0.28.3
            k8s.io/client-go v0.28.3
          )
          EOF
          go mod download
          go build -o cluster-backup /tmp/main.go
          chmod +x cluster-backup
        volumeMounts:
        - name: workspace
          mountPath: /workspace
        - name: source-code
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
      - name: copy-source
        image: busybox:1.35
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cat > /tmp/main.go << 'EOF'
          # Source code will be injected here
          EOF
        volumeMounts:
        - name: source-code
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: source-code
        emptyDir: {}